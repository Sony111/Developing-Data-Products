rep((10,4),2,2)
matrix(rep(10,4),2,2)
apropos("par")
x <- iris
x$colour[x$Species == "setosa"] <-"red"
x$colour[x$Species == "versicolor"] <-"blue"
x$colour[x$Species == "virginica"] <-"green"
head(x)
plot(x[,1:4],col = x$colour)
plot(iris[,1:4])
plot(iris[,1:4],col=iris$Species)
library(MASS)
car <- Cars93
car$MPG <- (Cars93$MPG.city+Cars93$MPG.highway)/2
str(car)
attach(car)
par(mfrow = c(5,2))
plot(MPG ~ Manufacturer)
plot(MPG ~ Model)
plot(MPG ~ Type)
plot(MPG ~ AirBags)
plot(MPG ~ DriveTrain)
plot(MPG ~ Cylinders)
plot(MPG ~ Man.trans.avail)
plot(MPG ~ Origin)
plot(MPG ~ Make)
?mutate
library(dplyr)
library("dplyr")
df <- car[,c("Price","EngineSize","Horsepower","Wheelbase","Width","Weight")]
plot(df)
df <- car[,c("Price","EngineSize","Horsepower","Wheelbase","Width","Weight","MPG")]
plot(df)
type <- table(car$Type)
coltype <- rainbow(length(levels(car$Type)))
barplot(type, main= "Frequency of different types of car",
xlab="Type", col=coltype)
par(mfrow=c(1,1))
d <- density(car$MPG)
plot(d, main="Density plot for MPG")
polygon(density(car$MPG),col="lightblue" )
par(mfrow=c(2,2))
plot(wt,mpg,col=colList)
attach(mtcars)
plot(wt,mpg,col=colList)
colList <- ifelse(am=0,"black","blue")
colList <- ifelse(am==0,"black","blue")
plot(wt,mpg,col=colList)
text(4.5,30,"Testing")
?text
par(mfrow=c(1,1))
plot(wt,mpg,col=colList)
text(4.5,30,"Testing")
text(5,25,"Testing",cex=.5)
text(5,25,"Testing",cex=.5,col="red")
mtext("margin text" ,side=2,line=2.8)
mtext("margin text" ,side=2,line=3.8)
mtext("Subheading" ,side=3,line=.6)
text(2,22,"Testing",cex=.5,col="blue")
plot(wt,mpg,col=colList,pch=19)
text(4.5,30,"Testing")
text(5,25,"Testing",cex=.5,col="red")
text(2,22,"Testing",cex=.5,col="blue")
mtext("margin text" ,side=2,line=3.8)
mtext("Subheading" ,side=3,line=.6)
mtext("margin text" ,side=2,line=1.8)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
plot(mpg,cyl)
layout(matrix(c(1,1,2,3),2,2))
plot(mpg,cyl)
plot(mpg,wt)
plot(mpg,hp)
par(mfrow=c(1,1,2,3))
layout(matrix(c(1,2,1,3),2,2))
plot(mpg,cyl)
plot(mpg,wt)
plot(mpg,hp)
layout(matrix(c(1,2,1,3),2,2,byrow=T,widths=c(3,1),heights=c(1,2)))
layout(matrix(c(1,2,1,3),2,2,byrow=T)widths=c(3,1),heights=c(1,2))
layout(matrix(c(1,2,1,3),2,2,byrow=T),widths=c(3,1),heights=c(1,2))
hist(wt)
hist(MPG)
hist(disp)
layout(matrix(c(1,2,1,3),2,2,byrow=T))
hist(wt)
hist(MPG)
hist(disp)
par(fig=c(0,.8,0,.8),new=T)
plot(wt,mpg,xlab="weight",ylab="Mpg")
par(fig=c(0,.8,0,.8),new=T)
plot(wt,mpg,xlab="weight",ylab="Mpg")
boxplot(mpg,horizontal = T,axes=F)
par(fig=c(0,.8,0,.8),new=T)
plot(wt,mpg,xlab="weight",ylab="Mpg")
par(fig=c(0,.8,0,.8),new=T)
boxplot(mpg,horizontal = T,axes=F)
par(fig=c(0,.8,0,.8),new=T)
boxplot(wt,axes=F)
mtext("nhanced Scatterplot",side=3,outer=T,line=-3)
par(fig=c(0,.8,0,.8),new=T)
plot(wt,mpg,xlab="weight",ylab="Mpg")
par(fig=c(0,.8,0,.8),new=T)
plot(wt,mpg,xlab="weight",ylab="Mpg")
par(fig=c(0,.8,0.55,1),new=T)
boxplot(mpg,horizontal = T,axes=F)
par(fig=c(0.65,1,0,.8),new=T)
boxplot(wt,axes=F)
mtext("Enhanced Scatterplot",side=3,outer=T,line=-3)
?par
library(lattice)
?corrgrm
?corrgram
library(corrgram)
install.packages("corrgram")
library(corrgram)
?corrgram
corrgram(iris, lower.panel=panel.pts, upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.pts, upper.panel=panel.shade,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.bar(), upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.bar, upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.ellipse, upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.pie, upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(iris, lower.panel=panel.pts, upper.panel=panel.conf,
diag.panel=panel.txt)
corrgram(iris, lower.panel=panel.pts, upper.panel=panel.conf,
diag.panel=panel.minmax)
library(ggplot2)
library(mgcv)
data("diamonds")
glimpse(diamonds)
str(diamonds)
sapply(airquality,)
head(airquality)
str(airquality)
sapply(airquality,as.factor(airquality$Month),mean)
lapply(airquality,as.factor(airquality$Month),mean)
apply(airquality,as.factor(airquality$Month),mean)
apply(airquality,split(airquality,airquality$Month),mean)
tapply(airquality,split(airquality,airquality$Month),mean)
s <- split(airquality , airquality$Month)
tapply(s,mean)
s
?tapply
?tapply(x,simplify=F, range)
tapply(x,simplify=F, range)
tapply(s,simplify=F, range)
tapply(s,simplify=F, sum)
tapply(s,simplify=F, fun = colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
tapply(s,simplify=F, function(x) colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
tapply(s,function(x) colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
lapply(s,function(x) colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
lapply(s,function(s) colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
lapply(s,function(s) colMeans(s[,c("Ozone","Solor.R" ,"Wind")]))
lapply(s,function(s) colMeans(x[,c("Ozone","Solor.R" ,"Wind")]))
function (x)
function (x)
?names
?lelevels
?levels
?order
?factor
head(iris)
iris[,w:= Sepal.Length+2]
iris[, Sepal.Length:= Sepal.Length>5]
as.data.frame.table(iris)
d <- as.data.frame.table(iris)
class(d)
datasets()
dataset()
dataset
?datasets
head(Ideaths)
head(ldeaths)
head(mdeaths)
str(PlantGrowth)
str(quakes)
str(state.abb)
str(state)
str(USAccDeaths)
str(WWWusage)
str(WorldPhones)
head(WorldPhones)
head(wrapbreaks)
head(warpbreaks)
str(warpbreaks)
str(VADeaths)
head(VADeaths)
head(uspop)
str(uspop)
str(USPersonalExpenditure)
head(USPersonalExpenditure)
str(UScitiesD)
head(UScitiesD)
head(Titanic)
head(swiss)
str(swiss)
str(sleep)
str(rock)
str(PlantGrowth)
str(Orange)
head(Orange)
?Orange
head(airquality)
head(ability.cov)
head(AirPassengers)
head(ability)
plot(airquality)
str(airquality)
plot(airquality[-5,])
head(airquality[-5,])
head(airquality[,-5])
plot(airquality[,-5])
head(cars)
str(Fruits)
require(googleVis)
head(Fruits)
str(Fruits)
Fruits
gvisMotionChart(Fruits, idvar = 'Fruit', timevar = 'Year')
b <- gvisMotionChart(Fruits, idvar = 'Fruit', timevar = 'Year')
plot(b)
?gvisMotionChart
str(Fruits)
myStateSettings <-'
{"xZoomedDataMin":1199145600000,"colorOption":"2",
"duration":{"timeUnit":"Y","multiplier":1},"yLambda":1,
"yAxisOption":"4","sizeOption":"_UNISIZE",
"iconKeySettings":[],"xLambda":1,"nonSelectedAlpha":0,
"xZoomedDataMax":1262304000000,"iconType":"LINE",
"dimensions":{"iconDimensions":["dim0"]},
"showTrails":false,"uniColorForNonSelected":false,
"xAxisOption":"_TIME","orderedByX":false,"playDuration":15000,
"xZoomedIn":false,"time":"2010","yZoomedDataMin":0,
"yZoomedIn":false,"orderedByY":false,"yZoomedDataMax":100}
'
M6a <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(state=myStateSettings))
plot(M6a)
slidifyUI(
sidebarPanel(
selectInput('sex', 'Choose Sex', c('Male', 'Female')),
selectInput('type', 'Choose Type',
c('multiBarChart', 'multiBarHorizontalChart')
)
),
mainPanel(
tags$div(id = 'nvd3plot', class='shiny-html-output nvd3 rChart')
)
)
375*2
275*2
750 * 60
750/2
385*2
library(shiny)
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
head(mtcars)
?factor
mtcars$am <- factor(mtcars$am,levels=2,labels = c("Automatic","Manual"))
mtcars$am <- as.factor(mtcars$am) #utomatic","Manual"))
str(mtcars)
mtcars$am <- factor(mtcars$am,labels = c("Automatic","Manual"))
str(mtcars)
plot(mtcars$am,y=mtcars$mpg)
plot(mtcars$am,y=mtcars$mpg, xlab="Transmission" , ylab="MPG")
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
str(mtcars)
model <- lm(mpg ~. ,  data=mtcars)
best_model <- step(model,direction="both")
summary(best_model)
# wt ,qsec,am
newdata = data.frame(wt=2.5,qsec=18, am="0")
predict(best_model,newdata , interval = "predict")
newdata = data.frame(wt=2.5,qsec=18, am="0")
predict(best_model,newdata , interval = "predict")
head(mtcars)
425-7497074
mtcars$am <- factor(mtcars$am)
head(mtcars)
library(shiny)
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
options(shiny.trace=TRUE)
options(shiny.trace=TRUE)
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
str(mtcars)
model <- lm(mpg ~. ,  data=mtcars)
best_model <- step(model,direction="both")
summary(best_model)
# wt ,qsec,am
newdata = data.frame(wt=2.5,qsec=18, am="0")
predict(best_model,newdata , interval = "predict")
mc   <- gvisMotionChart(mtcars, idvar="am", xvar="cyl", yvar="mpg")
library(ggplot2)
library(rCharts)
mc   <- gvisMotionChart(mtcars, idvar="am", xvar="cyl", yvar="mpg")
install_github('ramnathv/slidify', ref = github_pull(425))
library(devtools)
install_github('ramnathv/slidify', ref = github_pull(425))
library(slidify)
?gvisMotionChart
library(googleVis)
?gvisMotionChart
mc   <- gvisMotionChart(mtcars, idvar="am", xvar="cyl", yvar="mpg")
head(mtcars)
str(mtcars)
predict(best_model,newdata , interval = "predict")
predict(best_model,newdata , interval = "predict")$fit
?predict
p= predict(best_model,newdata , interval = "predict")
p$fit
p
p[1]
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
newdata = data.frame(wt=5.5,qsec=18, am="0")
predict(best_model,newdata , interval = "predict")
newdata = data.frame(wt=5.5,qsec=18, am="1")
predict(best_model,newdata , interval = "predict")
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
?mtcars
?step
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
bubble2 <- gvisBarChart(mtcars, idvar="am", xvar="cyl", yvar="mpg")
plot(bubble2)
bubble2 <- gvisBarChart(mtcars, idvar="am", yvar="mpg")
?gvisTreeMap
Tree <- gvisTreeMap(Regions,  idvar="Region", parentvar="Parent",
sizevar="Val", colorvar="Fac")
plot(Tree)
?gvisTable
tbl1 <- gvisTable(Population)
plot(tbl1)
plot(gvisTable(mtcars))
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
p <- qplot(wt, mpg, data=mtcars, shape=qsec, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
# White background and black grid lines
p + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
p + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
p <- qplot(wt, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
# White background and black grid lines
p + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
p + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
p <- qplot(wt, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. weight",
xlab="weight", ylab="Miles per Gallon")
# White background and black grid lines
p + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
p + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
p
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
?corrgram
library(corrgram)
?corrgram
corrgram(mtcars, lower.panel=panel.pts, upper.panel=panel.conf,
diag.panel=panel.density)
corrgram(mtcars, lower.panel=panel.pts, upper.panel=panel.shade,
diag.panel=panel.txt)
corrgram(mtcars, lower.panel=panel.shade, upper.panel=panel.pie,
diag.panel=panel.txt)
corrgram(mtcars, lower.panel=panel.shade, upper.panel=panel.pie
)
corrgram(mtcars, lower.panel=panel.conf, upper.panel=panel.pie)
corrgram(mtcars, lower.panel=panel.conf, upper.panel=panel.pie,diag.panel=panel.minmax)
corrgram(mtcars, lower.panel=panel.shade, upper.panel=panel.conf,diag.panel=panel.minmax)
corrgram(mtcars, lower.panel=panel.shade, upper.panel=panel.conf,diag.panel=panel.minmax)
corrgram(mtcars,order=T, lower.panel=panel.shade, upper.panel=panel.conf,diag.panel=panel.minmax)
str(mtcars)
corrgram(mtcars,order=T, lower.panel=panel.shade, upper.panel=panel.conf,diag.panel=panel.minmax)
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
library(MASS)
stepAIC(model,direction="both")
?step
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
library(DAAG)
cv.lm(mtcars,model,3)
cv.lm(mtcars,bestmodel,3)
cv.lm(mtcars,best_model,3)
plot(best_model)
?lm
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
?step
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
shiny::runApp('Coursera/09.Developing Data Products/Week 2/Test')
library(reshape2)
?melt
library(lubridate)
library(dplyr)
library(doBy)
?rbind
attach(mtcars)
par(mfrow=c(1,1,2,3),byrow=T,wdths=c(3,1),heights=c(1,2))
par(mfrow=(c(1,1,2,3)),byrow=T,wdths=c(3,1),heights=c(1,2))
par(mfrow=(c(1,1,2,3),byrow=T),widths=c(3,1),heights=c(1,2))
par(mfrow=(c(1,1,2,3),byrow=T),widths=c(3,1),heights=c(1,2)) hist(wt)hist(mpg)hist(disp)
layout(matrix(c(1,1,2,3),2,2,byrow=T),widths=c(3,1),heights=c(1,2)) hist(wt)hist(mpg)hist(disp))
counts <- c(100,89,68,66,54)
proportions <- c(.29,.21,.17,.17,.16)
prop.test(counts,proportions)
?mode
s <- "Bat-Ma-n_Sup-er-Man_Spi-derM-an"
strsplit(gsub("-","/",s),"/")
?t()
?resize
?cast
?POSIXct
detach(mtcars)
?save
x <- 10:20
x <- 1:20
x{which(x > 10)]
x[which(x > 10)]
names(x) <- c("weight")
x
x <- 1:25
b <- (x>=13)
sum(b)
b
x <- c(1,2,"CTS",T)
class(x)
mysplit <- split(iris,iris$Species)
mysplit
class(mysplit)
?par
?plot
a <- c(1,2,3,4,5,6,NA,NA,NA,7,8,9)
a[is.na(a)] <- mean(a,na.rm=T)
a
dplayer::rearrange
dplayer::rearrange()
dplayer::group_by()
?dplayer
library(dplayer)
install.packages("dplayer")
install.packages("dplyr")
install.packages("dplyr")
?Titanic
class(Titanic)
?ncol
ls()
size(iris)
summary(iris)
library(devtools)
install_github('ramnathv/slidify', ref = github_pull(425))
library(slidify)
library(devtools)
library(slidify)
setwd("C:/Users/ushap_000/Desktop/Coursera/09.Developing Data Products/Week 2")
author("shiny")
shiny::runApp('C:/Users/ushap_000/Desktop/Coursera/09.Developing Data Products/Week 2/Cars')
<img src="MPG"> screenshot</img>
getwd()
slidify(index.Rmd)
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
